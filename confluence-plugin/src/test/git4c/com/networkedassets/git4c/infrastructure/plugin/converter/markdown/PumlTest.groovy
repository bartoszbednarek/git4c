package com.networkedassets.git4c.infrastructure.plugin.converter.markdown

import net.sourceforge.plantuml.FileFormat
import net.sourceforge.plantuml.FileFormatOption
import net.sourceforge.plantuml.SourceFileReader
import spock.lang.Specification

import java.nio.file.Files
import java.nio.file.Paths

import static com.networkedassets.git4c.infrastructure.plugin.converter.ConverterUtils.getMarkdown

class PumlTest extends Specification {

    def "UML should be converted and added to markdown"() {

        given:
        def puml = Paths.get("src/test/resources", "markdown/pumlTest/umls/test.puml")
        def tempDirectory = Files.createTempDirectory("temp").toFile()
        def webPage = getMarkdown("pumlTest").content

        when:
        def reader = new SourceFileReader(puml.toFile(), tempDirectory, new FileFormatOption(FileFormat.SVG))
        def image = reader.generatedImages[0].pngFile

        def base64 = Files.readAllBytes(image.toPath()).encodeBase64()
        def xml = new XmlSlurper().parseText(webPage)
        def img = xml.p.img

        then:
        //To check if file was successfully converted
        base64.toString().size() > 20
        //SVG have autogenerated ids inside and we can't just compare two svgs
        img.@src.toString().startsWith("data:image/svg+xml;base64")
        tempDirectory.deleteDir()
    }

    def "Empty PUML shouldn't be converted and added to markdown"() {

        given:
        def tempDirectory = Files.createTempDirectory("temp").toFile()
        def webPage = getMarkdown("emptyPumlTest").content

        when:
        def xml = new XmlSlurper().parseText(webPage)
        def img = xml.p.img

        then:
        img.isEmpty()
        tempDirectory.deleteDir()
    }

}
